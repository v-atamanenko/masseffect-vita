// profile sce_vp_psp2

uniform float4 g_BonePalette[192];
uniform float4x4 g_WorldViewProjection;
uniform float4 g_PositionScaleBias;
uniform float g_TextureScale0;
uniform float2 g_TextureBias0;
uniform float4 g_UniformColour;
uniform float4 g_AmbientColor;

float4x4 GetSkinNMat4(float4 indexes, float4 weights, int n)
{
    float4 row1 = float4(0.0,0.0,0.0,0.0);
    float4 row2 = float4(0.0,0.0,0.0,0.0);
    float4 row3 = float4(0.0,0.0,0.0,0.0);
    for(int i=0;i<n;i++)
    {
        row1 += g_BonePalette[int(indexes[i])*3]*weights[i];
        row2 += g_BonePalette[int(indexes[i])*3+1]*weights[i];
        row3 += g_BonePalette[int(indexes[i])*3+2]*weights[i];
    }
    return float4x4(row1.x,row2.x,row3.x,0.0,
                    row1.y,row2.y,row3.y,0.0,
                    row1.z,row2.z,row3.z,0.0,
                    row1.w,row2.w,row3.w,1.0);
}

float4x4 GetSkinMat4(int idx)
{
    idx*=3;
    return float4x4(g_BonePalette[idx].x,g_BonePalette[idx+1].x,g_BonePalette[idx+2].x,0.0,
                    g_BonePalette[idx].y,g_BonePalette[idx+1].y,g_BonePalette[idx+2].y,0.0,
                    g_BonePalette[idx].z,g_BonePalette[idx+1].z,g_BonePalette[idx+2].z,0.0,
                    g_BonePalette[idx].w,g_BonePalette[idx+1].w,g_BonePalette[idx+2].w,1.0);
}

void main(
    float3 vs_Position,
    float4 vs_SkinIndex,
    float4 vs_SkinWeight,
    float2 vs_TexCoord0,
    float2 out TexCoord0 : TEXCOORD0,
    float4 out UniformCol : COLOR,
    float4 out gl_Position : POSITION
) {
    UniformCol = ((g_UniformColour) * (g_AmbientColor));
    TexCoord0 = ((vs_TexCoord0 * g_TextureScale0) + g_TextureBias0);
    gl_Position = mul(float4((vs_Position * g_PositionScaleBias.x + g_PositionScaleBias.yzw), 1.00), mul(GetSkinNMat4(vs_SkinIndex,vs_SkinWeight,4), g_WorldViewProjection));
}
